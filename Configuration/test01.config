{
    #Version
    "config": 1,

    #Input format and filepath/name
    "input": ["csv", "Data/loadingtest.csv"],

    #Preprocessing part for the whole dataset
    "preprocess": [
        #Preprocessing part
        lambda d: tr.pp_drop_missing_data_columns(d, 60),
        lambda d: tr.pp_drop_autocorrelated(d, 0.99),
    ],

    #Transformations on columns
    "transformations": [
        #Example of how to write any operation between two columns using a lambda function
        #We can also have more operations inside the lambda (doesn't have to be 2 columns only)
        #As long as we use it in format ["newcolumnname", lambda function]
        #This gives the programmer a lot more expressiveness.

        ["new_sum_loans", lambda d: d['loan_amnt'] + d['funded_amnt']],
        ["new_div_loans", lambda d: d['loan_amnt'] / d['int_rate']],
        ["exist_NY", lambda d: tr.exists(d, 'NY')], #All the New York ones
        ["grade_cat", lambda d: tr.lookup_dictionary(d, 'grade')]

    ],

    #Output format and filepath/name
    "output": ["csv", "out.csv"],
}
